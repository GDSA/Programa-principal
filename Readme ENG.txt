Copyright (c) [2013] [Ramon Franquesa Alberti, Carlos Martín Isla , Gonzalo Lopez Lillo , Aleix Gras Godoy ]
Project: Event Dettection

The code provided is used to classify a set of images as the event type they belong to.

A brief summary explanation of the code

1. Descriptor
	Inputs:
The input consists of a number of directories with name event_id photos sorted regarding ground truth, which in turn have been generated by a function that reads the ground truth (csv separated by tabs) and distributes images in these directories.

	Used Functions (brief description)

	•	LecturaImatges model = (dir, flag)
Extracted features of images in a directory and stores them in an array.Each row is a feature vector of an image training.
if flag = 0, extracted luminance histograms, and if 1, extracted HOG.
	•	HistogramaBlocs vector = (I)
Histogram blocks 64 and concatenates the histograms blocks one after another
	•	H = histogram (im)
Luminance histogram of 256 bins. It works fairly well for concerts. That was the original idea.
	•	H = HOG2 (im)
HOG.16 blocks per image. 16 bins per block. Extract textures and shapes specifically address each pixel (arctan (dx, dy)). Then arcotangentes produces a histogram for each block.
http://www.mathworks.com/matlabcentral/fileexchange/28689-hog-descriptor-for-matlab/content/HOG.m

Description of main
It is clean and a list is created with the event_type
Event_type pictures of each project / directory are recovered and extracted feature in each retrieval.
All features are concatenated and exported to a bin file:
-First row: vector with the number of vectors per model
-Rest: Matrix with all the characteristic vectors of training

Output data format 
Combining these last two structures (vector and matrix) data recovery will get the equivalent of a vector of matrices, where each matrix corresponds to a model or drawing class and turn the power of matlab for matrices.

out:
Elapsed time is 759.279714 modelosHOG.bin seconds.
Elapsed time is 72.345675 modelosHIST.bin seconds.
Elapsed time is 283.444886 modelosHISTBLOC.bin seconds.

example:
[230 12 28 4 2237 19 9 16 22]% vector with number of elements per class
<2577x256 double>% double precision array with all the features of training.

2. Classificador
	Inputs
The received data is a bin file. Containing 1 vector of each image containing the descriptors for each image.
read the data and pass them to an array.

on the other hand we read the images we want to classify extract its features (descriptor) and create a struct with the names, photographic id that we will qualify.

The format of the input data is a vector, a vector per photo, normalized between 0 and 1.

	Used Functions (brief description)

	•	[Name, n_model, H] = lecturaImatges_Aval (phonebook);
Lee rated the images you want in the directory where they are stored.
shows the descriptor of each image by creating a vector image
Indexes the vector into an array (n_model) in order that this matrix has all vectors of all photos (1 photo 1 vector).
gets the id of each image and saves it to a struct (name)
	•	index = classificador_knn (n_model (i, :), auxmat, index, k);
enters a vector of images to classify new (n_model (i, :))
enters the matrix with all vectors Photo trained auxmat
enters index that contains the number of pictures they have of each index type
enters the value of k, the number of smaller distances are desired, later compare.
within the function:
distance = sum (abs (x-Vnew));
matriu_diferencia (i) = distance;
shows the distance and puts euclidean vector containing an image comparing with all trained, looking for smaller K, and those smaller K, the most repeated value.
index shows a folder which is part.

	Description of main

reading of the new images,
creates an array of all the described image,
kan classified images with the images of train
with the value of the classifier we know what type of event / no event we
creates a. txt
the id of photography and event descriptor

	Output data format and

the output is a TXT named picture (id) type space photo classified
324083101090070769_226937959 concert

3.Evaluator

	Data Entry and Formatting
The input data are. Txt and read the csvimport ('') function;
	
	Functions Used
	•	csvimport ();
Import files. Csv

	•	[Id type] = spacecuter ();
Separate Identity and class.

	•	x = find (ID1, ID2);
Compare if the names of the photos are the same or not, and the time saved in x has been found.

	•	OUT = evaluated (event);
Is assigned to the event found No, you can use confusionmat ();

	•	[C, order] = confusionmat (g1, g2)
Creates the confusion matrix, stored in the g1 and g2 values.

	•	uitable ()
Create tables from the confusion matrix and calculated the Precision, recall and fscore values.

	•	MutualInfo Mihat = (C1, C2)
You enter the confusion matrices and the calculation of NMI goes.

http://www.cad.zju.edu.cn/home/dengcai/Data/code/MutualInfo.m

	Description of main.
First fill the database with ground truth of all images. Then load the file with the sorted images classifier.
After two consecutive fors do to compare the identity of classified image database, in order to find the right type of event. That then store it in the IN and OUT variables.
Next we create the confusion matrix.
And then we calculate the accuracy, Record and F1score.
Finally we show the results in tables and do the corresponding graphs.

	Output data format and
Tables and graphs with the result values
